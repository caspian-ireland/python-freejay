"""Tkinter app components."""

import tkinter as tk
from freejay import messages as mes
from freejay import produce_consume as prodcon


class TkRoot(tk.Tk, prodcon.Producer):
    """
    Tkinter app root.

    Extends the Tk toplevel widget with the producer interface.
    """

    pass


class TkComponent:
    """
    Tkinter app component.

    Intended to be extended by child classes, TkComponent provides functionality
    to create and send messages.

    The top level Tk widget (TkRoot) is registered at initialisation,
    which handles all messags dispatch.

    Currently supported message types:
        * Button
        * Key

    See methods docs for more details.
    """

    def __init__(self, tkroot: TkRoot, source=mes.Source):
        """Construct TkComponent.

        Args:
            tkroot (TkRoot): Top level Tk widget.
            source (mes.Source): TkComponent message source.
        """
        self.tkroot = tkroot
        self.source = source

    def button(
        self,
        component: mes.Component,
        element: mes.Element,
        press_release: mes.PressRelease,
    ) -> None:
        """Construct and send 'Button' message.

        Args:
            component (mes.Component): Message component
            element (mes.Element): Message Element
            press_release (mes.PressRelease): Press/Release
        """
        msg = mes.Message(
            sender=mes.Sender(
                source=self.source,
                trigger=mes.Trigger.BUTTON,
            ),
            content=mes.Button(
                press_release=press_release, component=component, element=element
            ),
        )
        self.send_message(msg)

    def key(self, press_release: mes.PressRelease, tkevent: tk.Event) -> None:
        """Construct and send 'Key' message.

        Args:
            press_release (mes.PressRelease): Press/Release
            tkevent (tk.Event): Key event generated by Tkinter.
        """
        msg = mes.Message(
            sender=mes.Sender(
                source=self.source,
                trigger=mes.Trigger.KEY,
            ),
            content=mes.Key(press_release=press_release, sym=tkevent.keysym),
        )
        self.send_message(msg)

    def send_message(self, msg: mes.Message):
        """Send a message.

        Message is sent from the top level Tk widget.
        Args:
            msg (mes.Message): Message to send.
        """
        self.tkroot.send_message(msg)


class TkMain(TkComponent):
    """
    Main application frame.

    Keybindings are registered here.
    """

    def __init__(
        self,
        tkroot: TkRoot,
        source: mes.Source,
    ):
        """Construct TkMain.

        Args:
            tkroot (TkRoot): Top-level Tk widget.
            source (mes.Source): Source to use for messages.
        """
        super().__init__(tkroot=tkroot, source=source)
        self.frame = tk.Frame(tkroot)
        self.tkroot.bind(
            "<KeyPress>",
            lambda event: self.key(press_release=mes.PressRelease.PRESS, tkevent=event),
        )
        self.tkroot.bind(
            "<KeyRelease>",
            lambda event: self.key(
                press_release=mes.PressRelease.RELEASE, tkevent=event
            ),
        )


class TkDeck(TkComponent):
    """Deck (player) frame."""

    def __init__(self, tkroot: TkRoot, source: mes.Source, component: mes.Component):
        """Construct TkDeck.

        Args:
            tkroot (TkRoot): Top-level Tk widget.
            source (mes.Source): Message source.
            component (mes.Component): Message Component (LEFT_DECK or RIGHT_DECK)
        """
        super().__init__(tkroot=tkroot, source=source)
        self.component = component
        self.frame = tk.Frame(tkroot)
        self.play_btn = tk.Button(self.frame, text="play")
        self.play_btn.grid(row=0, column=0)
        self.play_btn.bind(
            "<ButtonPress-1>",
            lambda event: self.button(
                component=self.component,
                element=mes.Element.PLAY_PAUSE,
                press_release=mes.PressRelease.PRESS,
            ),
        )
        self.play_btn.bind(
            "<ButtonRelease-1>",
            lambda event: self.button(
                component=self.component,
                element=mes.Element.PLAY_PAUSE,
                press_release=mes.PressRelease.RELEASE,
            ),
        )
